Guía de instalación:

El siguiente documento muestra los pasos necesarios para instalar el producto así como las dependencias necesarias para su correcto funcionamiento. 

Dependencias:

- Python >= 3.4.0
- Pip
- ecdsa => 0.1.2
- jws 0.11 (Dependencia: ecdsa, hashlib, hmac)
- urllib 
- ssl


!!! Atencion, jws no se instala correctamente desde pypi !!!
Proceder a su instalacion desde la version contenida en "3dparty"

URLs de Interes:

- https://tools.ietf.org/html/draft-ietf-jose-json-web-signature-37
- https://github.com/mozilla/openbadges/wiki/Badge-Baking
- http://validator.openbadges.org/
- https://github.com/openbadges/openbadges-specification/blob/master/Assertion/latest.md
- https://github.com/mozilla/openbadges/wiki/Creating-Signed-Assertions

Instalación de “virtualenv” con pip3

$ sudo pip3 install virtualenv
$ sudo virtualenv -p /usr/bin/python3 venv-openbadges

Activación del virtualenv
$ source venv-openbadges/bin/activate

Una vez hallamos activado el entorno virtual, procedemos a instalar las dependencias de Pypi.
(venv-openbadges):~$ sudo pip3 install ecdsa


Carpeta tests/*
Bajo este repertorio se encuentran los tests unitarios de la aplicacion. Estos tests tienen como finalidad
asegurar que el desarrollo es seguro antes de su despliegue. Para ejecutar los tests basta con ejecutar el
siguiente comando.

$ ./runtests.sh

Inhibicion de la creacion de bytecode:

Si deseas que no se genere __pycache__ y los ficheros *.pyc, configura la variable de entornor PYTHONDONTWRITEBYTECODE
con el valor 1:

$ export PYTHONDONTWRITEBYTECODE=1


config.py:


En este fichero se encuentra la configuración del programa que está compuesta por 3 diccionarios llamados 'issuer', 'badge' y 'keygen'.

El diccionario 'issuer' contiene la información del emisor de los badges. Esta información debe ser estática puesto que el nombre de la clave privada se genera a partir del emisor.

El diccionario 'keygen' contiene la información de las rutas donde se guardarán las claves públicas y privadas.

La lista 'badge' es una lista de diccionarios, de manera que un emisor puede expedir y firmar diferentes badges especificando su nombre. 


keygeneration.py:

Este script crea un par de claves ECDSA (publica y privada) del tipo NIST256p y las guarda en disco en formato PEM.
Para crear las claves hay que suministrar el nombre de un "issuer" o "emisor de badges", que sera la entidad final
que firmara los badges. Cada emisor SOLO puede tener una clave privada pero multiples claves publicas.

    * El nombre de la clave privada se genera codificando en SHA-1 el nombre del "issuer".
    * El nombre de la clave publica se genera calculando el SHA-1 de la clave publica.

badgsigner.py:
<TODO>

badgeverifier.py
<TODO>





